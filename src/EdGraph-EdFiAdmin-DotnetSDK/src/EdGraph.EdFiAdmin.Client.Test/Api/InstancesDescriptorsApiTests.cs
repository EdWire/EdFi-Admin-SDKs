/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Api;
// uncomment below to import models
//using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Test.Api
{
    /// <summary>
    ///  Class for testing InstancesDescriptorsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstancesDescriptorsApiTests : IDisposable
    {
        private InstancesDescriptorsApi instance;

        public InstancesDescriptorsApiTests()
        {
            instance = new InstancesDescriptorsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstancesDescriptorsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InstancesDescriptorsApi
            //Assert.IsType<InstancesDescriptorsApi>(instance);
        }

        /// <summary>
        /// Test CreateDescriptorAsync
        /// </summary>
        [Fact]
        public void CreateDescriptorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1DescriptorType? edfiAdminApiEdfiAdminV1DescriptorType = null;
            //var response = instance.CreateDescriptorAsync(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1DescriptorType);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1DescriptorCreatedResponse>(response);
        }

        /// <summary>
        /// Test DeleteDescriptorAsync
        /// </summary>
        [Fact]
        public void DeleteDescriptorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //int descriptorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteDescriptorAsync(tenantId, instanceId, year, descriptorId, apiVersion, xVersion);
        }

        /// <summary>
        /// Test GetDescriptorByIdAsync
        /// </summary>
        [Fact]
        public void GetDescriptorByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //int descriptorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetDescriptorByIdAsync(tenantId, instanceId, year, descriptorId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1DescriptorType>(response);
        }

        /// <summary>
        /// Test GetDescriptorNamespacesAsync
        /// </summary>
        [Fact]
        public void GetDescriptorNamespacesAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetDescriptorNamespacesAsync(tenantId, instanceId, year, pageSize, pageIndex, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1DescriptorNamespacesPaginatedItemsResponse>(response);
        }

        /// <summary>
        /// Test GetDescriptorsAsync
        /// </summary>
        [Fact]
        public void GetDescriptorsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? filter = null;
            //string? orderBy = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetDescriptorsAsync(tenantId, instanceId, year, pageSize, pageIndex, filter, orderBy, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1DescriptorsPaginatedItemsResponse>(response);
        }

        /// <summary>
        /// Test UpdateDescriptorAsync
        /// </summary>
        [Fact]
        public void UpdateDescriptorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //int descriptorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1DescriptorType? edfiAdminApiEdfiAdminV1DescriptorType = null;
            //var response = instance.UpdateDescriptorAsync(tenantId, instanceId, year, descriptorId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1DescriptorType);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1DescriptorUpdatedResponse>(response);
        }
    }
}
