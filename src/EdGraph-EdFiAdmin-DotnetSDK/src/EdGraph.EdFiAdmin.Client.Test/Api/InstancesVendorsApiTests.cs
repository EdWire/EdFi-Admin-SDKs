/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Api;
// uncomment below to import models
//using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Test.Api
{
    /// <summary>
    ///  Class for testing InstancesVendorsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstancesVendorsApiTests : IDisposable
    {
        private InstancesVendorsApi instance;

        public InstancesVendorsApiTests()
        {
            instance = new InstancesVendorsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstancesVendorsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InstancesVendorsApi
            //Assert.IsType<InstancesVendorsApi>(instance);
        }

        /// <summary>
        /// Test CreateVendorAsync
        /// </summary>
        [Fact]
        public void CreateVendorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1CreateVendorRequest? edfiAdminApiEdfiAdminV1CreateVendorRequest = null;
            //var response = instance.CreateVendorAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateVendorRequest);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1VendorCreatedResponse>(response);
        }

        /// <summary>
        /// Test DeleteVendorAsync
        /// </summary>
        [Fact]
        public void DeleteVendorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int vendorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteVendorAsync(tenantId, instanceId, vendorId, apiVersion, xVersion);
        }

        /// <summary>
        /// Test GetVendorByIdAsync
        /// </summary>
        [Fact]
        public void GetVendorByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string vendorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetVendorByIdAsync(tenantId, instanceId, vendorId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1VendorProfileResponse>(response);
        }

        /// <summary>
        /// Test GetVendorsAsync
        /// </summary>
        [Fact]
        public void GetVendorsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetVendorsAsync(tenantId, instanceId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1VendorListResponsePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test SyncVendorAsync
        /// </summary>
        [Fact]
        public void SyncVendorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int vendorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1SyncVendorRequest? edfiAdminApiEdfiAdminV1SyncVendorRequest = null;
            //instance.SyncVendorAsync(tenantId, instanceId, vendorId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1SyncVendorRequest);
        }

        /// <summary>
        /// Test UpdateVendorAsync
        /// </summary>
        [Fact]
        public void UpdateVendorAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string vendorId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1UpdateVendorRequest? edfiAdminApiEdfiAdminV1UpdateVendorRequest = null;
            //var response = instance.UpdateVendorAsync(tenantId, instanceId, vendorId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateVendorRequest);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1VendorUpdatedResponse>(response);
        }
    }
}
