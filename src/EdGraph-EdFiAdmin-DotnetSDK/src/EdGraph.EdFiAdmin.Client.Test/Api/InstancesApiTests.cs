/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Api;
// uncomment below to import models
//using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Test.Api
{
    /// <summary>
    ///  Class for testing InstancesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstancesApiTests : IDisposable
    {
        private InstancesApi instance;

        public InstancesApiTests()
        {
            instance = new InstancesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InstancesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' InstancesApi
            //Assert.IsType<InstancesApi>(instance);
        }

        /// <summary>
        /// Test AddSchoolYear
        /// </summary>
        [Fact]
        public void AddSchoolYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = null;
            //instance.AddSchoolYear(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRequest);
        }

        /// <summary>
        /// Test AddSchoolYearRange
        /// </summary>
        [Fact]
        public void AddSchoolYearRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = null;
            //instance.AddSchoolYearRange(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest);
        }

        /// <summary>
        /// Test ChangeInstanceDatabaseTierAsync
        /// </summary>
        [Fact]
        public void ChangeInstanceDatabaseTierAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = null;
            //instance.ChangeInstanceDatabaseTierAsync(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest);
        }

        /// <summary>
        /// Test CloneInstanceAsync
        /// </summary>
        [Fact]
        public void CloneInstanceAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = null;
            //var response = instance.CloneInstanceAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CloneInstanceRequest);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1CloneInstanceResponse>(response);
        }

        /// <summary>
        /// Test CreateInstanceAsync
        /// </summary>
        [Fact]
        public void CreateInstanceAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = null;
            //instance.CreateInstanceAsync(tenantId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateInstanceRequest);
        }

        /// <summary>
        /// Test DeleteInstanceAsync
        /// </summary>
        [Fact]
        public void DeleteInstanceAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteInstanceAsync(tenantId, instanceId, apiVersion, xVersion);
        }

        /// <summary>
        /// Test DeleteSchoolYearAsync
        /// </summary>
        [Fact]
        public void DeleteSchoolYearAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteSchoolYearAsync(tenantId, instanceId, year, apiVersion, xVersion);
        }

        /// <summary>
        /// Test GetEdFiAdminInstanceEndpoints
        /// </summary>
        [Fact]
        public void GetEdFiAdminInstanceEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetEdFiAdminInstanceEndpoints(tenantId, instanceId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>(response);
        }

        /// <summary>
        /// Test GetEdFiAdminInstanceYearEndpoints
        /// </summary>
        [Fact]
        public void GetEdFiAdminInstanceYearEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetEdFiAdminInstanceYearEndpoints(tenantId, instanceId, year, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>(response);
        }

        /// <summary>
        /// Test GetInstanceByIdAsync
        /// </summary>
        [Fact]
        public void GetInstanceByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetInstanceByIdAsync(tenantId, instanceId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1Instance>(response);
        }

        /// <summary>
        /// Test GetInstancesAsync
        /// </summary>
        [Fact]
        public void GetInstancesAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //bool? deleted = null;
            //string? targetTenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetInstancesAsync(tenantId, pageSize, pageIndex, orderBy, filter, deleted, targetTenantId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test ResetInstanceAsync
        /// </summary>
        [Fact]
        public void ResetInstanceAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.ResetInstanceAsync(tenantId, instanceId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>(response);
        }

        /// <summary>
        /// Test ResetInstanceCacheAsync
        /// </summary>
        [Fact]
        public void ResetInstanceCacheAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.ResetInstanceCacheAsync(tenantId, instanceId, year, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>(response);
        }

        /// <summary>
        /// Test ResetSchoolYearAsync
        /// </summary>
        [Fact]
        public void ResetSchoolYearAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.ResetSchoolYearAsync(tenantId, instanceId, year, apiVersion, xVersion);
        }

        /// <summary>
        /// Test SetInstanceIsDefault
        /// </summary>
        [Fact]
        public void SetInstanceIsDefaultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1SetInstanceIsDefaultRequest? edfiAdminApiEdfiAdminV1SetInstanceIsDefaultRequest = null;
            //instance.SetInstanceIsDefault(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1SetInstanceIsDefaultRequest);
        }

        /// <summary>
        /// Test TestInstanceConnection
        /// </summary>
        [Fact]
        public void TestInstanceConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.TestInstanceConnection(tenantId, instanceId, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>(response);
        }

        /// <summary>
        /// Test TestInstanceYearConnection
        /// </summary>
        [Fact]
        public void TestInstanceYearConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //int year = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.TestInstanceYearConnection(tenantId, instanceId, year, apiVersion, xVersion);
            //Assert.IsType<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>(response);
        }

        /// <summary>
        /// Test UpdateInstanceAsync
        /// </summary>
        [Fact]
        public void UpdateInstanceAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string instanceId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = null;
            //instance.UpdateInstanceAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateInstanceRequest);
        }
    }
}
