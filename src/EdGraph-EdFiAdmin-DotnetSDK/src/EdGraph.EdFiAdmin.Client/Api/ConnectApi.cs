/*
 * Admin API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Client.Auth;

namespace EdGraph.EdFiAdmin.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ConnectRegisterPost(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectRegisterPostWithHttpInfo(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ConnectTokenPost(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectTokenPostWithHttpInfo(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectRegisterPostAsync(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectRegisterPostWithHttpInfoAsync(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectTokenPostAsync(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectTokenPostWithHttpInfoAsync(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectApi : IConnectApiSync, IConnectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectApi : IConnectApi
    {
        private EdGraph.EdFiAdmin.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectApi(string basePath)
        {
            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.EdFiAdmin.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectApi(EdGraph.EdFiAdmin.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConnectApi(EdGraph.EdFiAdmin.Client.Client.ISynchronousClient client, EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient asyncClient, EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ConnectRegisterPost(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0)
        {
            ConnectRegisterPostWithHttpInfo(clientId, clientSecret, displayName);
        }

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> ConnectRegisterPostWithHttpInfo(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientSecret", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (displayName != null)
            {
                localVarRequestOptions.FormParameters.Add("DisplayName", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(displayName)); // form parameter
            }

            localVarRequestOptions.Operation = "ConnectApi.ConnectRegisterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connect/register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectRegisterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectRegisterPostAsync(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ConnectRegisterPostWithHttpInfoAsync(clientId, clientSecret, displayName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> ConnectRegisterPostWithHttpInfoAsync(string? clientId = default(string?), string? clientSecret = default(string?), string? displayName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientSecret", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (displayName != null)
            {
                localVarRequestOptions.FormParameters.Add("DisplayName", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(displayName)); // form parameter
            }

            localVarRequestOptions.Operation = "ConnectApi.ConnectRegisterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connect/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectRegisterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ConnectTokenPost(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0)
        {
            ConnectTokenPostWithHttpInfo(clientId, clientSecret, grantType, scope);
        }

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> ConnectTokenPostWithHttpInfo(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }

            localVarRequestOptions.Operation = "ConnectApi.ConnectTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/connect/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectTokenPostAsync(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ConnectTokenPostWithHttpInfoAsync(clientId, clientSecret, grantType, scope, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> ConnectTokenPostWithHttpInfoAsync(String? clientId = default(String?), String? clientSecret = default(String?), String? grantType = default(String?), string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }

            localVarRequestOptions.Operation = "ConnectApi.ConnectTokenPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/connect/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectTokenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
