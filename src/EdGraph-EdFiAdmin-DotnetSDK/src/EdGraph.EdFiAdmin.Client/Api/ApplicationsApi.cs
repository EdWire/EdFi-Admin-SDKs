/*
 * Admin API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Client.Auth;
using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves all applications.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsGet(int operationIndex = 0);

        /// <summary>
        /// Retrieves all applications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Deletes an existing application using the resource identifier.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V1ApplicationsIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Deletes an existing application using the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ApplicationsIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific application based on the identifier.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        EdFiOdsAdminApiFeaturesApplicationsApplicationModel V1ApplicationsIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific application based on the identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Updates application based on the resource identifier.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        EdFiOdsAdminApiFeaturesApplicationsApplicationModel V1ApplicationsIdPut(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// Updates application based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdPutWithHttpInfo(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0);
        /// <summary>
        /// Reset application credentials. Returns new key and secret.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        EdFiOdsAdminApiFeaturesApplicationsApplicationResult V1ApplicationsIdResetCredentialPut(int id, int operationIndex = 0);

        /// <summary>
        /// Reset application credentials. Returns new key and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsIdResetCredentialPutWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Creates application based on the supplied values.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        EdFiOdsAdminApiFeaturesApplicationsApplicationResult V1ApplicationsPost(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// Creates application based on the supplied values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsPostWithHttpInfo(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves all applications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        System.Threading.Tasks.Task<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all applications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>>> V1ApplicationsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing application using the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ApplicationsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing application using the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ApplicationsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific application based on the identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific application based on the identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates application based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdPutAsync(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates application based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsIdPutWithHttpInfoAsync(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset application credentials. Returns new key and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsIdResetCredentialPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset application credentials. Returns new key and secret.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>> V1ApplicationsIdResetCredentialPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates application based on the supplied values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsPostAsync(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates application based on the supplied values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>> V1ApplicationsPostWithHttpInfoAsync(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApplicationsApiSync, IApplicationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private EdGraph.EdFiAdmin.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(string basePath)
        {
            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.EdFiAdmin.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(EdGraph.EdFiAdmin.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationsApi(EdGraph.EdFiAdmin.Client.Client.ISynchronousClient client, EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient asyncClient, EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves all applications. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        public List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsGet(int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> localVarResponse = V1ApplicationsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all applications. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsGetWithHttpInfo(int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>>("/v1/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all applications. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> localVarResponse = await V1ApplicationsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all applications. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;EdFiOdsAdminApiFeaturesApplicationsApplicationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>>> V1ApplicationsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>>("/v1/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing application using the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V1ApplicationsIdDelete(int id, int operationIndex = 0)
        {
            V1ApplicationsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an existing application using the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> V1ApplicationsIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing application using the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ApplicationsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1ApplicationsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing application using the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> V1ApplicationsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application based on the identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public EdFiOdsAdminApiFeaturesApplicationsApplicationModel V1ApplicationsIdGet(int id, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> localVarResponse = V1ApplicationsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application based on the identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>("/v1/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application based on the identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public async System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> localVarResponse = await V1ApplicationsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application based on the identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>("/v1/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates application based on the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public EdFiOdsAdminApiFeaturesApplicationsApplicationModel V1ApplicationsIdPut(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> localVarResponse = V1ApplicationsIdPutWithHttpInfo(id, edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates application based on the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdPutWithHttpInfo(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest' is set
            if (edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest' when calling ApplicationsApi->V1ApplicationsIdPut");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest;

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>("/v1/applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates application based on the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationModel</returns>
        public async System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> V1ApplicationsIdPutAsync(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel> localVarResponse = await V1ApplicationsIdPutWithHttpInfoAsync(id, edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates application based on the resource identifier. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>> V1ApplicationsIdPutWithHttpInfoAsync(int id, EdFiOdsAdminApiFeaturesApplicationsEditApplicationRequest edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest' is set
            if (edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest' when calling ApplicationsApi->V1ApplicationsIdPut");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = edFiOdsAdminApiFeaturesApplicationsEditApplicationRequest;

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>("/v1/applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset application credentials. Returns new key and secret. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public EdFiOdsAdminApiFeaturesApplicationsApplicationResult V1ApplicationsIdResetCredentialPut(int id, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> localVarResponse = V1ApplicationsIdResetCredentialPutWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset application credentials. Returns new key and secret. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsIdResetCredentialPutWithHttpInfo(int id, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdResetCredentialPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>("/v1/applications/{id}/reset-credential", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdResetCredentialPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset application credentials. Returns new key and secret. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public async System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsIdResetCredentialPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> localVarResponse = await V1ApplicationsIdResetCredentialPutWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset application credentials. Returns new key and secret. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationResult)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>> V1ApplicationsIdResetCredentialPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsIdResetCredentialPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>("/v1/applications/{id}/reset-credential", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsIdResetCredentialPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates application based on the supplied values. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public EdFiOdsAdminApiFeaturesApplicationsApplicationResult V1ApplicationsPost(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> localVarResponse = V1ApplicationsPostWithHttpInfo(edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates application based on the supplied values. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsPostWithHttpInfo(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest' is set
            if (edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest' when calling ApplicationsApi->V1ApplicationsPost");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest;

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>("/v1/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates application based on the supplied values. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdFiOdsAdminApiFeaturesApplicationsApplicationResult</returns>
        public async System.Threading.Tasks.Task<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> V1ApplicationsPostAsync(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult> localVarResponse = await V1ApplicationsPostWithHttpInfoAsync(edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates application based on the supplied values. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdFiOdsAdminApiFeaturesApplicationsApplicationResult)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>> V1ApplicationsPostWithHttpInfoAsync(EdFiOdsAdminApiFeaturesApplicationsAddApplicationRequest edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest' is set
            if (edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest' when calling ApplicationsApi->V1ApplicationsPost");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = edFiOdsAdminApiFeaturesApplicationsAddApplicationRequest;

            localVarRequestOptions.Operation = "ApplicationsApi.V1ApplicationsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdFiOdsAdminApiFeaturesApplicationsApplicationResult>("/v1/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1ApplicationsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
