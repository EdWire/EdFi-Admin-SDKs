/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Client.Auth;
using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an ODS database to an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddSchoolYear(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0);

        /// <summary>
        /// Adds an ODS database to an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSchoolYearWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0);
        /// <summary>
        /// Adds multiple ODS databases to an instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddSchoolYearRange(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0);

        /// <summary>
        /// Adds multiple ODS databases to an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSchoolYearRangeWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0);
        /// <summary>
        /// Changes the selected tier of an ODS database.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ChangeInstanceDatabaseTierAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0);

        /// <summary>
        /// Changes the selected tier of an ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeInstanceDatabaseTierAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0);
        /// <summary>
        /// Clones an instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        EdfiAdminApiEdfiAdminV1CloneInstanceResponse CloneInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0);

        /// <summary>
        /// Clones an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> CloneInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateInstanceAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateInstanceAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0);
        /// <summary>
        /// Deletes an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Removes an ODS database from an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSchoolYearAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Removes an ODS database from an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSchoolYearAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse GetEdFiAdminInstanceEndpoints(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceEndpointsWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse GetEdFiAdminInstanceYearEndpoints(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceYearEndpointsWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves an Instance by ID.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1Instance</returns>
        EdfiAdminApiEdfiAdminV1Instance GetInstanceByIdAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves an Instance by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1Instance</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1Instance> GetInstanceByIdAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of Instances.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel GetInstancesAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of Instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> GetInstancesAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Resets an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        EdfiAdminApiEdfiAdminV1ResetInstanceResponse ResetInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Resets an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        EdfiAdminApiEdfiAdminV1ResetInstanceResponse ResetInstanceCacheAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceCacheAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Resets the ODS database with the specified school year.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResetSchoolYearAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Resets the ODS database with the specified school year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetSchoolYearAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse TestInstanceConnection(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceConnectionWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse TestInstanceYearConnection(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceYearConnectionWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates an Instance.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds an ODS database to an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSchoolYearAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds an ODS database to an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSchoolYearWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds multiple ODS databases to an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSchoolYearRangeAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds multiple ODS databases to an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSchoolYearRangeWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Changes the selected tier of an ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeInstanceDatabaseTierAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Changes the selected tier of an ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeInstanceDatabaseTierAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clones an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> CloneInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clones an instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1CloneInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse>> CloneInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateInstanceAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateInstanceAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes an ODS database from an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSchoolYearAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes an ODS database from an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSchoolYearAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceEndpointsAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>> GetEdFiAdminInstanceEndpointsWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceYearEndpointsAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>> GetEdFiAdminInstanceYearEndpointsWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an Instance by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1Instance</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1Instance> GetInstanceByIdAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an Instance by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1Instance)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1Instance>> GetInstanceByIdAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of Instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> GetInstancesAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of Instances.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel>> GetInstancesAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resets an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resets an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1ResetInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>> ResetInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceCacheAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1ResetInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>> ResetInstanceCacheAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resets the ODS database with the specified school year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetSchoolYearAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resets the ODS database with the specified school year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetSchoolYearAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceConnectionAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>> TestInstanceConnectionWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceYearConnectionAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests the connection of the Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>> TestInstanceYearConnectionWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an Instance.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesApi : IInstancesApiSync, IInstancesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstancesApi : IInstancesApi
    {
        private EdGraph.EdFiAdmin.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstancesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstancesApi(string basePath)
        {
            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.EdFiAdmin.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstancesApi(EdGraph.EdFiAdmin.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstancesApi(EdGraph.EdFiAdmin.Client.Client.ISynchronousClient client, EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient asyncClient, EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds an ODS database to an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddSchoolYear(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0)
        {
            AddSchoolYearWithHttpInfo(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRequest);
        }

        /// <summary>
        /// Adds an ODS database to an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> AddSchoolYearWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->AddSchoolYear");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->AddSchoolYear");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1AddSchoolYearRequest;

            localVarRequestOptions.Operation = "InstancesApi.AddSchoolYear";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSchoolYear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds an ODS database to an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSchoolYearAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddSchoolYearWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Adds an ODS database to an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> AddSchoolYearWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->AddSchoolYear");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->AddSchoolYear");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1AddSchoolYearRequest;

            localVarRequestOptions.Operation = "InstancesApi.AddSchoolYear";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSchoolYear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds multiple ODS databases to an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddSchoolYearRange(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0)
        {
            AddSchoolYearRangeWithHttpInfo(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest);
        }

        /// <summary>
        /// Adds multiple ODS databases to an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> AddSchoolYearRangeWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->AddSchoolYearRange");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->AddSchoolYearRange");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest;

            localVarRequestOptions.Operation = "InstancesApi.AddSchoolYearRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSchoolYearRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds multiple ODS databases to an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSchoolYearRangeAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddSchoolYearRangeWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Adds multiple ODS databases to an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> AddSchoolYearRangeWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest? edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest = default(EdfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->AddSchoolYearRange");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->AddSchoolYearRange");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1AddSchoolYearRangeRequest;

            localVarRequestOptions.Operation = "InstancesApi.AddSchoolYearRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSchoolYearRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Changes the selected tier of an ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ChangeInstanceDatabaseTierAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0)
        {
            ChangeInstanceDatabaseTierAsyncWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest);
        }

        /// <summary>
        /// Changes the selected tier of an ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> ChangeInstanceDatabaseTierAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ChangeInstanceDatabaseTierAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ChangeInstanceDatabaseTierAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest;

            localVarRequestOptions.Operation = "InstancesApi.ChangeInstanceDatabaseTierAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeInstanceDatabaseTierAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Changes the selected tier of an ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeInstanceDatabaseTierAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ChangeInstanceDatabaseTierAsyncWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Changes the selected tier of an ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> ChangeInstanceDatabaseTierAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest? edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest = default(EdfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ChangeInstanceDatabaseTierAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ChangeInstanceDatabaseTierAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1ChangeDatabaseTierRequest;

            localVarRequestOptions.Operation = "InstancesApi.ChangeInstanceDatabaseTierAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeInstanceDatabaseTierAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clones an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        public EdfiAdminApiEdfiAdminV1CloneInstanceResponse CloneInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> localVarResponse = CloneInstanceAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CloneInstanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clones an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> CloneInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->CloneInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->CloneInstanceAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CloneInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.CloneInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1CloneInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloneInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clones an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1CloneInstanceResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> CloneInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse> localVarResponse = await CloneInstanceAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CloneInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clones an instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CloneInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1CloneInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1CloneInstanceResponse>> CloneInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CloneInstanceRequest? edfiAdminApiEdfiAdminV1CloneInstanceRequest = default(EdfiAdminApiEdfiAdminV1CloneInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->CloneInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->CloneInstanceAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CloneInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.CloneInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1CloneInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloneInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateInstanceAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0)
        {
            CreateInstanceAsyncWithHttpInfo(tenantId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateInstanceRequest);
        }

        /// <summary>
        /// Creates a new Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> CreateInstanceAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->CreateInstanceAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.CreateInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/edfiadmin/instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateInstanceAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateInstanceAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a new Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> CreateInstanceAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateInstanceRequest? edfiAdminApiEdfiAdminV1CreateInstanceRequest = default(EdfiAdminApiEdfiAdminV1CreateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->CreateInstanceAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.CreateInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/edfiadmin/instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            DeleteInstanceAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion);
        }

        /// <summary>
        /// Deletes an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> DeleteInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->DeleteInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->DeleteInstanceAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.DeleteInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInstanceAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> DeleteInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->DeleteInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->DeleteInstanceAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.DeleteInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes an ODS database from an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSchoolYearAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            DeleteSchoolYearAsyncWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion);
        }

        /// <summary>
        /// Removes an ODS database from an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> DeleteSchoolYearAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->DeleteSchoolYearAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->DeleteSchoolYearAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.DeleteSchoolYearAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchoolYearAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes an ODS database from an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSchoolYearAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSchoolYearAsyncWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes an ODS database from an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> DeleteSchoolYearAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->DeleteSchoolYearAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->DeleteSchoolYearAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.DeleteSchoolYearAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchoolYearAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse GetEdFiAdminInstanceEndpoints(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> localVarResponse = GetEdFiAdminInstanceEndpointsWithHttpInfo(tenantId, instanceId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceEndpointsWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetEdFiAdminInstanceEndpoints");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetEdFiAdminInstanceEndpoints");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetEdFiAdminInstanceEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/endpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdFiAdminInstanceEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceEndpointsAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> localVarResponse = await GetEdFiAdminInstanceEndpointsWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>> GetEdFiAdminInstanceEndpointsWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetEdFiAdminInstanceEndpoints");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetEdFiAdminInstanceEndpoints");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetEdFiAdminInstanceEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/endpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdFiAdminInstanceEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse GetEdFiAdminInstanceYearEndpoints(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> localVarResponse = GetEdFiAdminInstanceYearEndpointsWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceYearEndpointsWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetEdFiAdminInstanceYearEndpoints");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetEdFiAdminInstanceYearEndpoints");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetEdFiAdminInstanceYearEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/endpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdFiAdminInstanceYearEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> GetEdFiAdminInstanceYearEndpointsAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse> localVarResponse = await GetEdFiAdminInstanceYearEndpointsWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the Ed-Fi API endpoint URLs of an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>> GetEdFiAdminInstanceYearEndpointsWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetEdFiAdminInstanceYearEndpoints");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetEdFiAdminInstanceYearEndpoints");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetEdFiAdminInstanceYearEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdfiAdminApiEdfiAdminV1InstanceEndpointsResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/endpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEdFiAdminInstanceYearEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Instance by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1Instance</returns>
        public EdfiAdminApiEdfiAdminV1Instance GetInstanceByIdAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1Instance> localVarResponse = GetInstanceByIdAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Instance by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1Instance</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1Instance> GetInstanceByIdAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetInstanceByIdAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetInstanceByIdAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetInstanceByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdfiAdminApiEdfiAdminV1Instance>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstanceByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Instance by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1Instance</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1Instance> GetInstanceByIdAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1Instance> localVarResponse = await GetInstanceByIdAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Instance by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1Instance)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1Instance>> GetInstanceByIdAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetInstanceByIdAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->GetInstanceByIdAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetInstanceByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdfiAdminApiEdfiAdminV1Instance>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstanceByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of Instances. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        public EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel GetInstancesAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> localVarResponse = GetInstancesAsyncWithHttpInfo(tenantId, pageSize, pageIndex, orderBy, filter, deleted, targetTenantId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of Instances. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> GetInstancesAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetInstancesAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (targetTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "targetTenantId", targetTenantId));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetInstancesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel>("/tenants/{tenantId}/edfiadmin/instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstancesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of Instances. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> GetInstancesAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel> localVarResponse = await GetInstancesAsyncWithHttpInfoAsync(tenantId, pageSize, pageIndex, orderBy, filter, deleted, targetTenantId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of Instances. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="deleted"> (optional, default to false)</param>
        /// <param name="targetTenantId"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel>> GetInstancesAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), bool? deleted = default(bool?), string? targetTenantId = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->GetInstancesAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (targetTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "targetTenantId", targetTenantId));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.GetInstancesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdfiAdminApiEdfiAdminV1InstancePaginatedItemsViewModel>("/tenants/{tenantId}/edfiadmin/instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstancesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public EdfiAdminApiEdfiAdminV1ResetInstanceResponse ResetInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> localVarResponse = ResetInstanceAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetInstanceAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/resetinstance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> localVarResponse = await ResetInstanceAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1ResetInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>> ResetInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetInstanceAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/resetinstance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public EdfiAdminApiEdfiAdminV1ResetInstanceResponse ResetInstanceCacheAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> localVarResponse = ResetInstanceCacheAsyncWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceCacheAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetInstanceCacheAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetInstanceCacheAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetInstanceCacheAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/resetcache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInstanceCacheAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1ResetInstanceResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> ResetInstanceCacheAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse> localVarResponse = await ResetInstanceCacheAsyncWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resets the cache of an Instance and the specified ODS database. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1ResetInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>> ResetInstanceCacheAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetInstanceCacheAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetInstanceCacheAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetInstanceCacheAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1ResetInstanceResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/resetcache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetInstanceCacheAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets the ODS database with the specified school year. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResetSchoolYearAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            ResetSchoolYearAsyncWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion);
        }

        /// <summary>
        /// Resets the ODS database with the specified school year. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> ResetSchoolYearAsyncWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetSchoolYearAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetSchoolYearAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetSchoolYearAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/resetods", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetSchoolYearAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets the ODS database with the specified school year. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetSchoolYearAsyncAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResetSchoolYearAsyncWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resets the ODS database with the specified school year. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> ResetSchoolYearAsyncWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->ResetSchoolYearAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->ResetSchoolYearAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.ResetSchoolYearAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/resetods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetSchoolYearAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse TestInstanceConnection(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> localVarResponse = TestInstanceConnectionWithHttpInfo(tenantId, instanceId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceConnectionWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->TestInstanceConnection");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->TestInstanceConnection");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.TestInstanceConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/testconnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInstanceConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceConnectionAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> localVarResponse = await TestInstanceConnectionWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>> TestInstanceConnectionWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->TestInstanceConnection");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->TestInstanceConnection");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.TestInstanceConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/testconnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInstanceConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse TestInstanceYearConnection(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> localVarResponse = TestInstanceYearConnectionWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceYearConnectionWithHttpInfo(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->TestInstanceYearConnection");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->TestInstanceYearConnection");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.TestInstanceYearConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/testconnection", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInstanceYearConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> TestInstanceYearConnectionAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse> localVarResponse = await TestInstanceYearConnectionWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the connection of the Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>> TestInstanceYearConnectionWithHttpInfoAsync(string tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->TestInstanceYearConnection");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->TestInstanceYearConnection");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesApi.TestInstanceYearConnection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1TestInstanceConnectionResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/testconnection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestInstanceYearConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateInstanceAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0)
        {
            UpdateInstanceAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateInstanceRequest);
        }

        /// <summary>
        /// Updates an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> UpdateInstanceAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->UpdateInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->UpdateInstanceAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.UpdateInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInstanceAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateInstanceAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateInstanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates an Instance. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateInstanceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> UpdateInstanceAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateInstanceRequest? edfiAdminApiEdfiAdminV1UpdateInstanceRequest = default(EdfiAdminApiEdfiAdminV1UpdateInstanceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstancesApi->UpdateInstanceAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesApi->UpdateInstanceAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateInstanceRequest;

            localVarRequestOptions.Operation = "InstancesApi.UpdateInstanceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInstanceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
