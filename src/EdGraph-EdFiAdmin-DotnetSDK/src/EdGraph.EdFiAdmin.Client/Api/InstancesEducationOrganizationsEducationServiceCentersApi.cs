/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Client.Auth;
using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesEducationOrganizationsEducationServiceCentersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an EducationServiceCenter.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse CreateEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> CreateEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0);
        /// <summary>
        /// Deletes an EducationServiceCenter.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves an EducationServiceCenter by ID.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        EdfiAdminApiEdfiAdminV1EducationServiceCenter GetEducationServiceCenterByIdAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter> GetEducationServiceCenterByIdAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates an EducationServiceCenter.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesEducationOrganizationsEducationServiceCentersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> CreateEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse>> CreateEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an EducationServiceCenter by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1EducationServiceCenter> GetEducationServiceCenterByIdAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1EducationServiceCenter)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter>> GetEducationServiceCenterByIdAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an EducationServiceCenter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstancesEducationOrganizationsEducationServiceCentersApi : IInstancesEducationOrganizationsEducationServiceCentersApiSync, IInstancesEducationOrganizationsEducationServiceCentersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstancesEducationOrganizationsEducationServiceCentersApi : IInstancesEducationOrganizationsEducationServiceCentersApi
    {
        private EdGraph.EdFiAdmin.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesEducationOrganizationsEducationServiceCentersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstancesEducationOrganizationsEducationServiceCentersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesEducationOrganizationsEducationServiceCentersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstancesEducationOrganizationsEducationServiceCentersApi(string basePath)
        {
            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.EdFiAdmin.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesEducationOrganizationsEducationServiceCentersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstancesEducationOrganizationsEducationServiceCentersApi(EdGraph.EdFiAdmin.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstancesEducationOrganizationsEducationServiceCentersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstancesEducationOrganizationsEducationServiceCentersApi(EdGraph.EdFiAdmin.Client.Client.ISynchronousClient client, EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient asyncClient, EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        public EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse CreateEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> localVarResponse = CreateEducationServiceCenterAsyncWithHttpInfo(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> CreateEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->CreateEducationServiceCenterAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest;

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.CreateEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> CreateEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse> localVarResponse = await CreateEducationServiceCenterAsyncWithHttpInfoAsync(tenantId, instanceId, year, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse>> CreateEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->CreateEducationServiceCenterAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateEducationServiceCenterRequest;

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.CreateEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1EducationServiceCenterCreatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            DeleteEducationServiceCenterAsyncWithHttpInfo(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion);
        }

        /// <summary>
        /// Deletes an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> DeleteEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->DeleteEducationServiceCenterAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.DeleteEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEducationServiceCenterAsyncWithHttpInfoAsync(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> DeleteEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->DeleteEducationServiceCenterAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.DeleteEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        public EdfiAdminApiEdfiAdminV1EducationServiceCenter GetEducationServiceCenterByIdAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter> localVarResponse = GetEducationServiceCenterByIdAsyncWithHttpInfo(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter> GetEducationServiceCenterByIdAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->GetEducationServiceCenterByIdAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.GetEducationServiceCenterByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdfiAdminApiEdfiAdminV1EducationServiceCenter>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEducationServiceCenterByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1EducationServiceCenter</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1EducationServiceCenter> GetEducationServiceCenterByIdAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter> localVarResponse = await GetEducationServiceCenterByIdAsyncWithHttpInfoAsync(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an EducationServiceCenter by ID. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1EducationServiceCenter)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1EducationServiceCenter>> GetEducationServiceCenterByIdAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->GetEducationServiceCenterByIdAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.GetEducationServiceCenterByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdfiAdminApiEdfiAdminV1EducationServiceCenter>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEducationServiceCenterByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateEducationServiceCenterAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0)
        {
            UpdateEducationServiceCenterAsyncWithHttpInfo(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest);
        }

        /// <summary>
        /// Updates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object> UpdateEducationServiceCenterAsyncWithHttpInfo(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->UpdateEducationServiceCenterAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest;

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.UpdateEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateEducationServiceCenterAsyncAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateEducationServiceCenterAsyncWithHttpInfoAsync(tenantId, instanceId, year, educationServiceCenterId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates an EducationServiceCenter. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="year"></param>
        /// <param name="educationServiceCenterId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<Object>> UpdateEducationServiceCenterAsyncWithHttpInfoAsync(Guid tenantId, string instanceId, int year, Guid educationServiceCenterId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest? edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest = default(EdfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstancesEducationOrganizationsEducationServiceCentersApi->UpdateEducationServiceCenterAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("educationServiceCenterId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(educationServiceCenterId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateEducationServiceCenterRequest;

            localVarRequestOptions.Operation = "InstancesEducationOrganizationsEducationServiceCentersApi.UpdateEducationServiceCenterAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/years/{year}/educationservicecenters/{educationServiceCenterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEducationServiceCenterAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
