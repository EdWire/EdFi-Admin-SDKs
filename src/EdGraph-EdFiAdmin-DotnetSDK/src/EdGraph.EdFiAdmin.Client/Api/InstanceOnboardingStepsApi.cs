/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.EdFiAdmin.Client.Client;
using EdGraph.EdFiAdmin.Client.Client.Auth;
using EdGraph.EdFiAdmin.Client.Model;

namespace EdGraph.EdFiAdmin.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstanceOnboardingStepsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an Onboarding Step.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse CreateInstanceOnboardingStepAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> CreateInstanceOnboardingStepAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates the status of an Onboarding Step.
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse UpdateInstanceOnboardingStepAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates the status of an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> UpdateInstanceOnboardingStepAsyncWithHttpInfo(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstanceOnboardingStepsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> CreateInstanceOnboardingStepAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>> CreateInstanceOnboardingStepAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the status of an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> UpdateInstanceOnboardingStepAsyncAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the status of an Onboarding Step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>> UpdateInstanceOnboardingStepAsyncWithHttpInfoAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstanceOnboardingStepsApi : IInstanceOnboardingStepsApiSync, IInstanceOnboardingStepsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstanceOnboardingStepsApi : IInstanceOnboardingStepsApi
    {
        private EdGraph.EdFiAdmin.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstanceOnboardingStepsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstanceOnboardingStepsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstanceOnboardingStepsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstanceOnboardingStepsApi(string basePath)
        {
            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.EdFiAdmin.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstanceOnboardingStepsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstanceOnboardingStepsApi(EdGraph.EdFiAdmin.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.EdFiAdmin.Client.Client.Configuration.MergeConfigurations(
                EdGraph.EdFiAdmin.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.EdFiAdmin.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstanceOnboardingStepsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstanceOnboardingStepsApi(EdGraph.EdFiAdmin.Client.Client.ISynchronousClient client, EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient asyncClient, EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.EdFiAdmin.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.EdFiAdmin.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.EdFiAdmin.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse CreateInstanceOnboardingStepAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> localVarResponse = CreateInstanceOnboardingStepAsyncWithHttpInfo(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> CreateInstanceOnboardingStepAsyncWithHttpInfo(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstanceOnboardingStepsApi->CreateInstanceOnboardingStepAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstanceOnboardingStepsApi->CreateInstanceOnboardingStepAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest;

            localVarRequestOptions.Operation = "InstanceOnboardingStepsApi.CreateInstanceOnboardingStepAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/onboardingsteps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstanceOnboardingStepAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> CreateInstanceOnboardingStepAsyncAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> localVarResponse = await CreateInstanceOnboardingStepAsyncWithHttpInfoAsync(tenantId, instanceId, apiVersion, xVersion, edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>> CreateInstanceOnboardingStepAsyncWithHttpInfoAsync(string tenantId, string instanceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest? edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1CreateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstanceOnboardingStepsApi->CreateInstanceOnboardingStepAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstanceOnboardingStepsApi->CreateInstanceOnboardingStepAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1CreateOnboardingStepRequest;

            localVarRequestOptions.Operation = "InstanceOnboardingStepsApi.CreateInstanceOnboardingStepAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/onboardingsteps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInstanceOnboardingStepAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the status of an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse UpdateInstanceOnboardingStepAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0)
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> localVarResponse = UpdateInstanceOnboardingStepAsyncWithHttpInfo(tenantId, instanceId, stepNumber, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the status of an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> UpdateInstanceOnboardingStepAsyncWithHttpInfo(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstanceOnboardingStepsApi->UpdateInstanceOnboardingStepAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstanceOnboardingStepsApi->UpdateInstanceOnboardingStepAsync");
            }

            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepNumber", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(stepNumber)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest;

            localVarRequestOptions.Operation = "InstanceOnboardingStepsApi.UpdateInstanceOnboardingStepAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/onboardingsteps/{stepNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInstanceOnboardingStepAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the status of an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> UpdateInstanceOnboardingStepAsyncAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse> localVarResponse = await UpdateInstanceOnboardingStepAsyncWithHttpInfoAsync(tenantId, instanceId, stepNumber, apiVersion, xVersion, edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the status of an Onboarding Step. 
        /// </summary>
        /// <exception cref="EdGraph.EdFiAdmin.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="instanceId"></param>
        /// <param name="stepNumber"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.EdFiAdmin.Client.Client.ApiResponse<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>> UpdateInstanceOnboardingStepAsyncWithHttpInfoAsync(string tenantId, string instanceId, int stepNumber, string? apiVersion = default(string?), string? xVersion = default(string?), EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest? edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest = default(EdfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InstanceOnboardingStepsApi->UpdateInstanceOnboardingStepAsync");
            }

            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new EdGraph.EdFiAdmin.Client.Client.ApiException(400, "Missing required parameter 'instanceId' when calling InstanceOnboardingStepsApi->UpdateInstanceOnboardingStepAsync");
            }


            EdGraph.EdFiAdmin.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.EdFiAdmin.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.EdFiAdmin.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceId", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepNumber", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(stepNumber)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.EdFiAdmin.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edfiAdminApiEdfiAdminV1UpdateOnboardingStepRequest;

            localVarRequestOptions.Operation = "InstanceOnboardingStepsApi.UpdateInstanceOnboardingStepAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdfiAdminApiEdfiAdminV1InstanceUpdatedResponse>("/tenants/{tenantId}/edfiadmin/instances/{instanceId}/onboardingsteps/{stepNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInstanceOnboardingStepAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
