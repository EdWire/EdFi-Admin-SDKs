/*
 * Admin API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.EdFiAdmin.Client.Client.OpenAPIDateConverter;

namespace EdGraph.EdFiAdmin.Client.Model
{
    /// <summary>
    /// EdFiOdsAdminApiFeaturesApplicationsApplicationModel
    /// </summary>
    [DataContract(Name = "EdFi.Ods.Admin.Api.Features.Applications.ApplicationModel")]
    public partial class EdFiOdsAdminApiFeaturesApplicationsApplicationModel : IEquatable<EdFiOdsAdminApiFeaturesApplicationsApplicationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesApplicationsApplicationModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiOdsAdminApiFeaturesApplicationsApplicationModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesApplicationsApplicationModel" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="claimSetName">claimSetName (required).</param>
        /// <param name="profileName">profileName (required).</param>
        /// <param name="educationOrganizationId">educationOrganizationId (required).</param>
        /// <param name="odsInstanceName">odsInstanceName (required).</param>
        public EdFiOdsAdminApiFeaturesApplicationsApplicationModel(int applicationId = default(int), string applicationName = default(string), string claimSetName = default(string), string profileName = default(string), int educationOrganizationId = default(int), string odsInstanceName = default(string))
        {
            this.ApplicationId = applicationId;
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new ArgumentNullException("applicationName is a required property for EdFiOdsAdminApiFeaturesApplicationsApplicationModel and cannot be null");
            }
            this.ApplicationName = applicationName;
            // to ensure "claimSetName" is required (not null)
            if (claimSetName == null)
            {
                throw new ArgumentNullException("claimSetName is a required property for EdFiOdsAdminApiFeaturesApplicationsApplicationModel and cannot be null");
            }
            this.ClaimSetName = claimSetName;
            // to ensure "profileName" is required (not null)
            if (profileName == null)
            {
                throw new ArgumentNullException("profileName is a required property for EdFiOdsAdminApiFeaturesApplicationsApplicationModel and cannot be null");
            }
            this.ProfileName = profileName;
            this.EducationOrganizationId = educationOrganizationId;
            // to ensure "odsInstanceName" is required (not null)
            if (odsInstanceName == null)
            {
                throw new ArgumentNullException("odsInstanceName is a required property for EdFiOdsAdminApiFeaturesApplicationsApplicationModel and cannot be null");
            }
            this.OdsInstanceName = odsInstanceName;
        }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "applicationName", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets ClaimSetName
        /// </summary>
        [DataMember(Name = "claimSetName", IsRequired = true, EmitDefaultValue = true)]
        public string ClaimSetName { get; set; }

        /// <summary>
        /// Gets or Sets ProfileName
        /// </summary>
        [DataMember(Name = "profileName", IsRequired = true, EmitDefaultValue = true)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationId
        /// </summary>
        [DataMember(Name = "educationOrganizationId", IsRequired = true, EmitDefaultValue = true)]
        public int EducationOrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OdsInstanceName
        /// </summary>
        [DataMember(Name = "odsInstanceName", IsRequired = true, EmitDefaultValue = true)]
        public string OdsInstanceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOdsAdminApiFeaturesApplicationsApplicationModel {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ClaimSetName: ").Append(ClaimSetName).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  OdsInstanceName: ").Append(OdsInstanceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiOdsAdminApiFeaturesApplicationsApplicationModel);
        }

        /// <summary>
        /// Returns true if EdFiOdsAdminApiFeaturesApplicationsApplicationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiOdsAdminApiFeaturesApplicationsApplicationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiOdsAdminApiFeaturesApplicationsApplicationModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    this.ApplicationId.Equals(input.ApplicationId)
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ClaimSetName == input.ClaimSetName ||
                    (this.ClaimSetName != null &&
                    this.ClaimSetName.Equals(input.ClaimSetName))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId)
                ) && 
                (
                    this.OdsInstanceName == input.OdsInstanceName ||
                    (this.OdsInstanceName != null &&
                    this.OdsInstanceName.Equals(input.OdsInstanceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                if (this.ClaimSetName != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimSetName.GetHashCode();
                }
                if (this.ProfileName != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EducationOrganizationId.GetHashCode();
                if (this.OdsInstanceName != null)
                {
                    hashCode = (hashCode * 59) + this.OdsInstanceName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
