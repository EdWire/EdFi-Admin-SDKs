/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.EdFiAdmin.Client.Client.OpenAPIDateConverter;

namespace EdGraph.EdFiAdmin.Client.Model
{
    /// <summary>
    /// EdfiAdminApiEdfiAdminV1EdFiConnection
    /// </summary>
    [DataContract(Name = "EdfiAdminApi.EdfiAdmin.V1.EdFiConnection")]
    public partial class EdfiAdminApiEdfiAdminV1EdFiConnection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdfiAdminApiEdfiAdminV1EdFiConnection" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="connectionName">connectionName.</param>
        /// <param name="databaseEngine">databaseEngine.</param>
        /// <param name="edFiVersion">edFiVersion.</param>
        /// <param name="edFiExtension">edFiExtension.</param>
        /// <param name="hostingProvider">hostingProvider.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="lastModifiedBy">lastModifiedBy.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="connectionType">connectionType.</param>
        public EdfiAdminApiEdfiAdminV1EdFiConnection(string id = default(string), string connectionName = default(string), string databaseEngine = default(string), string edFiVersion = default(string), string edFiExtension = default(string), string hostingProvider = default(string), string createdBy = default(string), string createdDateTime = default(string), string lastModifiedBy = default(string), string lastModifiedDateTime = default(string), string connectionType = default(string))
        {
            this.Id = id;
            this.ConnectionName = connectionName;
            this.DatabaseEngine = databaseEngine;
            this.EdFiVersion = edFiVersion;
            this.EdFiExtension = edFiExtension;
            this.HostingProvider = hostingProvider;
            this.CreatedBy = createdBy;
            this.CreatedDateTime = createdDateTime;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.ConnectionType = connectionType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionName
        /// </summary>
        [DataMember(Name = "connectionName", EmitDefaultValue = true)]
        public string ConnectionName { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseEngine
        /// </summary>
        [DataMember(Name = "databaseEngine", EmitDefaultValue = true)]
        public string DatabaseEngine { get; set; }

        /// <summary>
        /// Gets or Sets EdFiVersion
        /// </summary>
        [DataMember(Name = "edFiVersion", EmitDefaultValue = true)]
        public string EdFiVersion { get; set; }

        /// <summary>
        /// Gets or Sets EdFiExtension
        /// </summary>
        [DataMember(Name = "edFiExtension", EmitDefaultValue = true)]
        public string EdFiExtension { get; set; }

        /// <summary>
        /// Gets or Sets HostingProvider
        /// </summary>
        [DataMember(Name = "hostingProvider", EmitDefaultValue = true)]
        public string HostingProvider { get; set; }

        /// <summary>
        /// Gets or Sets AllowedTenantIds
        /// </summary>
        [DataMember(Name = "allowedTenantIds", EmitDefaultValue = true)]
        public List<string> AllowedTenantIds { get; private set; }

        /// <summary>
        /// Returns false as AllowedTenantIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowedTenantIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Tiers
        /// </summary>
        [DataMember(Name = "tiers", EmitDefaultValue = true)]
        public List<EdfiAdminApiEdfiAdminV1EdFiConnectionTier> Tiers { get; private set; }

        /// <summary>
        /// Returns false as Tiers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTiers()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name = "createdDateTime", EmitDefaultValue = true)]
        public string CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = true)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name = "lastModifiedDateTime", EmitDefaultValue = true)]
        public string LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connectionType", EmitDefaultValue = true)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdfiAdminApiEdfiAdminV1EdFiConnection {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConnectionName: ").Append(ConnectionName).Append("\n");
            sb.Append("  DatabaseEngine: ").Append(DatabaseEngine).Append("\n");
            sb.Append("  EdFiVersion: ").Append(EdFiVersion).Append("\n");
            sb.Append("  EdFiExtension: ").Append(EdFiExtension).Append("\n");
            sb.Append("  HostingProvider: ").Append(HostingProvider).Append("\n");
            sb.Append("  AllowedTenantIds: ").Append(AllowedTenantIds).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
