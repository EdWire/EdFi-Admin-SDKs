/*
 * Ed-Fi Admin Api
 *
 * Ed-Fi Admin Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.EdFiAdmin.Client.Client.OpenAPIDateConverter;

namespace EdGraph.EdFiAdmin.Client.Model
{
    /// <summary>
    /// EdfiAdminApiEdfiAdminV1CreateInstanceRequest
    /// </summary>
    [DataContract(Name = "EdfiAdminApi.EdfiAdmin.V1.CreateInstanceRequest")]
    public partial class EdfiAdminApiEdfiAdminV1CreateInstanceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdfiAdminApiEdfiAdminV1CreateInstanceRequest" /> class.
        /// </summary>
        /// <param name="instanceName">Details.</param>
        /// <param name="useCustomId">useCustomId.</param>
        /// <param name="customId">customId.</param>
        /// <param name="description">description.</param>
        /// <param name="databaseEngine">Connection.</param>
        /// <param name="selectedConnectionId">selectedConnectionId.</param>
        /// <param name="tenantId">Metadata.</param>
        public EdfiAdminApiEdfiAdminV1CreateInstanceRequest(string instanceName = default(string), bool useCustomId = default(bool), string customId = default(string), string description = default(string), string databaseEngine = default(string), string selectedConnectionId = default(string), string tenantId = default(string))
        {
            this.InstanceName = instanceName;
            this.UseCustomId = useCustomId;
            this.CustomId = customId;
            this.Description = description;
            this.DatabaseEngine = databaseEngine;
            this.SelectedConnectionId = selectedConnectionId;
            this.TenantId = tenantId;
        }

        /// <summary>
        /// Details
        /// </summary>
        /// <value>Details</value>
        [DataMember(Name = "instanceName", EmitDefaultValue = true)]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets or Sets UseCustomId
        /// </summary>
        [DataMember(Name = "useCustomId", EmitDefaultValue = true)]
        public bool UseCustomId { get; set; }

        /// <summary>
        /// Gets or Sets CustomId
        /// </summary>
        [DataMember(Name = "customId", EmitDefaultValue = true)]
        public string CustomId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Connection
        /// </summary>
        /// <value>Connection</value>
        [DataMember(Name = "databaseEngine", EmitDefaultValue = true)]
        public string DatabaseEngine { get; set; }

        /// <summary>
        /// Gets or Sets SelectedConnectionId
        /// </summary>
        [DataMember(Name = "selectedConnectionId", EmitDefaultValue = true)]
        public string SelectedConnectionId { get; set; }

        /// <summary>
        /// School Years
        /// </summary>
        /// <value>School Years</value>
        [DataMember(Name = "schoolYears", EmitDefaultValue = true)]
        public List<EdfiAdminApiEdfiAdminV1CreateInstanceRequestSchoolYear> SchoolYears { get; private set; }

        /// <summary>
        /// Returns false as SchoolYears should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchoolYears()
        {
            return false;
        }
        /// <summary>
        /// Metadata
        /// </summary>
        /// <value>Metadata</value>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdfiAdminApiEdfiAdminV1CreateInstanceRequest {\n");
            sb.Append("  InstanceName: ").Append(InstanceName).Append("\n");
            sb.Append("  UseCustomId: ").Append(UseCustomId).Append("\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DatabaseEngine: ").Append(DatabaseEngine).Append("\n");
            sb.Append("  SelectedConnectionId: ").Append(SelectedConnectionId).Append("\n");
            sb.Append("  SchoolYears: ").Append(SchoolYears).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
