/*
 * Admin API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.EdFiAdmin.Client.Client.OpenAPIDateConverter;

namespace EdGraph.EdFiAdmin.Client.Model
{
    /// <summary>
    /// EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel
    /// </summary>
    [DataContract(Name = "EdFi.Ods.Admin.Api.Features.ClaimSets.ResourceClaimModel")]
    public partial class EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel : IEquatable<EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="read">read (required).</param>
        /// <param name="create">create (required).</param>
        /// <param name="update">update (required).</param>
        /// <param name="delete">delete (required).</param>
        /// <param name="defaultAuthStrategiesForCRUD">defaultAuthStrategiesForCRUD (required).</param>
        /// <param name="authStrategyOverridesForCRUD">authStrategyOverridesForCRUD (required).</param>
        /// <param name="children">Children are collection of ResourceClaim (required).</param>
        public EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel(string name = default(string), bool read = default(bool), bool create = default(bool), bool update = default(bool), bool delete = default(bool), List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel> defaultAuthStrategiesForCRUD = default(List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel>), List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel> authStrategyOverridesForCRUD = default(List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel>), List<EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel> children = default(List<EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel and cannot be null");
            }
            this.Name = name;
            this.Read = read;
            this.Create = create;
            this.Update = update;
            this.Delete = delete;
            // to ensure "defaultAuthStrategiesForCRUD" is required (not null)
            if (defaultAuthStrategiesForCRUD == null)
            {
                throw new ArgumentNullException("defaultAuthStrategiesForCRUD is a required property for EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel and cannot be null");
            }
            this.DefaultAuthStrategiesForCRUD = defaultAuthStrategiesForCRUD;
            // to ensure "authStrategyOverridesForCRUD" is required (not null)
            if (authStrategyOverridesForCRUD == null)
            {
                throw new ArgumentNullException("authStrategyOverridesForCRUD is a required property for EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel and cannot be null");
            }
            this.AuthStrategyOverridesForCRUD = authStrategyOverridesForCRUD;
            // to ensure "children" is required (not null)
            if (children == null)
            {
                throw new ArgumentNullException("children is a required property for EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel and cannot be null");
            }
            this.Children = children;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name = "read", IsRequired = true, EmitDefaultValue = true)]
        public bool Read { get; set; }

        /// <summary>
        /// Gets or Sets Create
        /// </summary>
        [DataMember(Name = "create", IsRequired = true, EmitDefaultValue = true)]
        public bool Create { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name = "update", IsRequired = true, EmitDefaultValue = true)]
        public bool Update { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name = "delete", IsRequired = true, EmitDefaultValue = true)]
        public bool Delete { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAuthStrategiesForCRUD
        /// </summary>
        [DataMember(Name = "defaultAuthStrategiesForCRUD", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel> DefaultAuthStrategiesForCRUD { get; set; }

        /// <summary>
        /// Gets or Sets AuthStrategyOverridesForCRUD
        /// </summary>
        [DataMember(Name = "authStrategyOverridesForCRUD", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiOdsAdminApiFeaturesClaimSetsAuthorizationStrategyModel> AuthStrategyOverridesForCRUD { get; set; }

        /// <summary>
        /// Children are collection of ResourceClaim
        /// </summary>
        /// <value>Children are collection of ResourceClaim</value>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = true)]
        public List<EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Create: ").Append(Create).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  DefaultAuthStrategiesForCRUD: ").Append(DefaultAuthStrategiesForCRUD).Append("\n");
            sb.Append("  AuthStrategyOverridesForCRUD: ").Append(AuthStrategyOverridesForCRUD).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel);
        }

        /// <summary>
        /// Returns true if EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiOdsAdminApiFeaturesClaimSetsResourceClaimModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Read == input.Read ||
                    this.Read.Equals(input.Read)
                ) && 
                (
                    this.Create == input.Create ||
                    this.Create.Equals(input.Create)
                ) && 
                (
                    this.Update == input.Update ||
                    this.Update.Equals(input.Update)
                ) && 
                (
                    this.Delete == input.Delete ||
                    this.Delete.Equals(input.Delete)
                ) && 
                (
                    this.DefaultAuthStrategiesForCRUD == input.DefaultAuthStrategiesForCRUD ||
                    this.DefaultAuthStrategiesForCRUD != null &&
                    input.DefaultAuthStrategiesForCRUD != null &&
                    this.DefaultAuthStrategiesForCRUD.SequenceEqual(input.DefaultAuthStrategiesForCRUD)
                ) && 
                (
                    this.AuthStrategyOverridesForCRUD == input.AuthStrategyOverridesForCRUD ||
                    this.AuthStrategyOverridesForCRUD != null &&
                    input.AuthStrategyOverridesForCRUD != null &&
                    this.AuthStrategyOverridesForCRUD.SequenceEqual(input.AuthStrategyOverridesForCRUD)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Read.GetHashCode();
                hashCode = (hashCode * 59) + this.Create.GetHashCode();
                hashCode = (hashCode * 59) + this.Update.GetHashCode();
                hashCode = (hashCode * 59) + this.Delete.GetHashCode();
                if (this.DefaultAuthStrategiesForCRUD != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAuthStrategiesForCRUD.GetHashCode();
                }
                if (this.AuthStrategyOverridesForCRUD != null)
                {
                    hashCode = (hashCode * 59) + this.AuthStrategyOverridesForCRUD.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
