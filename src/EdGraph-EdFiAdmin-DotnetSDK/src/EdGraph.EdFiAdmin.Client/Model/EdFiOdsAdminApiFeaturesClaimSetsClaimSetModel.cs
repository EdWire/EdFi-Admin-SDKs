/*
 * Admin API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.EdFiAdmin.Client.Client.OpenAPIDateConverter;

namespace EdGraph.EdFiAdmin.Client.Model
{
    /// <summary>
    /// EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel
    /// </summary>
    [DataContract(Name = "EdFi.Ods.AdminApi.Features.ClaimSets.ClaimSetModel")]
    public partial class EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel : IEquatable<EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="isSystemReserved">isSystemReserved (required).</param>
        /// <param name="applicationsCount">applicationsCount (required).</param>
        public EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel(int id = default(int), string name = default(string), bool isSystemReserved = default(bool), int applicationsCount = default(int))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel and cannot be null");
            }
            this.Name = name;
            this.IsSystemReserved = isSystemReserved;
            this.ApplicationsCount = applicationsCount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemReserved
        /// </summary>
        [DataMember(Name = "isSystemReserved", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSystemReserved { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationsCount
        /// </summary>
        [DataMember(Name = "applicationsCount", IsRequired = true, EmitDefaultValue = true)]
        public int ApplicationsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsSystemReserved: ").Append(IsSystemReserved).Append("\n");
            sb.Append("  ApplicationsCount: ").Append(ApplicationsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel);
        }

        /// <summary>
        /// Returns true if EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiOdsAdminApiFeaturesClaimSetsClaimSetModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsSystemReserved == input.IsSystemReserved ||
                    this.IsSystemReserved.Equals(input.IsSystemReserved)
                ) && 
                (
                    this.ApplicationsCount == input.ApplicationsCount ||
                    this.ApplicationsCount.Equals(input.ApplicationsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSystemReserved.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplicationsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
